// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
	"time"
)

var (
	mikeUserDataFieldNames          = builder.RawFieldNames(&MikeUserData{})
	mikeUserDataRows                = strings.Join(mikeUserDataFieldNames, ",")
	mikeUserDataRowsExpectAutoSet   = strings.Join(stringx.Remove(mikeUserDataFieldNames, "`create_time`", "`update_time`"), ",")
	mikeUserDataRowsWithPlaceHolder = strings.Join(stringx.Remove(mikeUserDataFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMikeUserDataIdPrefix = "cache:goZero:mikeUserData:id:"
)

type (
	mikeUserDataModel interface {
		TransInsert(ctx context.Context, session sqlx.Session, data *MikeUserData) (sql.Result, error)
		Insert(ctx context.Context, data *MikeUserData) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MikeUserData, error)
		Update(ctx context.Context, data *MikeUserData) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMikeUserDataModel struct {
		sqlc.CachedConn
		table string
	}

	MikeUserData struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`
		Data       string    `db:"data"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newMikeUserDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMikeUserDataModel {
	return &defaultMikeUserDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`mike_user_data`",
	}
}

func (m *defaultMikeUserDataModel) TransInsert(ctx context.Context, session sqlx.Session, data *MikeUserData) (sql.Result, error) {
	goZeroMikeUserDataIdKey := fmt.Sprintf("%s%v", cacheGoZeroMikeUserDataIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, mikeUserDataRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.Id, data.UserId, data.Data)
	}, goZeroMikeUserDataIdKey)
	return ret, err
}

func (m *defaultMikeUserDataModel) Insert(ctx context.Context, data *MikeUserData) (sql.Result, error) {
	goZeroMikeUserDataIdKey := fmt.Sprintf("%s%v", cacheGoZeroMikeUserDataIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, mikeUserDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Data)
	}, goZeroMikeUserDataIdKey)
	return ret, err
}

func (m *defaultMikeUserDataModel) FindOne(ctx context.Context, id int64) (*MikeUserData, error) {
	goZeroMikeUserDataIdKey := fmt.Sprintf("%s%v", cacheGoZeroMikeUserDataIdPrefix, id)
	var resp MikeUserData
	err := m.QueryRowCtx(ctx, &resp, goZeroMikeUserDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mikeUserDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMikeUserDataModel) Update(ctx context.Context, data *MikeUserData) error {
	goZeroMikeUserDataIdKey := fmt.Sprintf("%s%v", cacheGoZeroMikeUserDataIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mikeUserDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Data, data.Id)
	}, goZeroMikeUserDataIdKey)
	return err
}

func (m *defaultMikeUserDataModel) Delete(ctx context.Context, id int64) error {
	goZeroMikeUserDataIdKey := fmt.Sprintf("%s%v", cacheGoZeroMikeUserDataIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMikeUserDataIdKey)
	return err
}

func (m *defaultMikeUserDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMikeUserDataIdPrefix, primary)
}

func (m *defaultMikeUserDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mikeUserDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMikeUserDataModel) tableName() string {
	return m.table
}
