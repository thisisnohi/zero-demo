// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ordercenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdercenterClient is the client API for Ordercenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdercenterClient interface {
	//-----------------------MIKEORDER-----------------------
	AddMIKEORDER(ctx context.Context, in *AddMIKEORDERReq, opts ...grpc.CallOption) (*AddMIKEORDERResp, error)
	UpdateMIKEORDER(ctx context.Context, in *UpdateMIKEORDERReq, opts ...grpc.CallOption) (*UpdateMIKEORDERResp, error)
	DelMIKEORDER(ctx context.Context, in *DelMIKEORDERReq, opts ...grpc.CallOption) (*DelMIKEORDERResp, error)
	GetMIKEORDERById(ctx context.Context, in *GetMIKEORDERByIdReq, opts ...grpc.CallOption) (*GetMIKEORDERByIdResp, error)
	SearchMIKEORDER(ctx context.Context, in *SearchMIKEORDERReq, opts ...grpc.CallOption) (*SearchMIKEORDERResp, error)
	//-----------------------MIKESTORE-----------------------
	AddMIKESTORE(ctx context.Context, in *AddMIKESTOREReq, opts ...grpc.CallOption) (*AddMIKESTOREResp, error)
	UpdateMIKESTORE(ctx context.Context, in *UpdateMIKESTOREReq, opts ...grpc.CallOption) (*UpdateMIKESTOREResp, error)
	DelMIKESTORE(ctx context.Context, in *DelMIKESTOREReq, opts ...grpc.CallOption) (*DelMIKESTOREResp, error)
	GetMIKESTOREById(ctx context.Context, in *GetMIKESTOREByIdReq, opts ...grpc.CallOption) (*GetMIKESTOREByIdResp, error)
	SearchMIKESTORE(ctx context.Context, in *SearchMIKESTOREReq, opts ...grpc.CallOption) (*SearchMIKESTOREResp, error)
	//-----------------------MIKEUSER-----------------------
	AddMIKEUSER(ctx context.Context, in *AddMIKEUSERReq, opts ...grpc.CallOption) (*AddMIKEUSERResp, error)
	UpdateMIKEUSER(ctx context.Context, in *UpdateMIKEUSERReq, opts ...grpc.CallOption) (*UpdateMIKEUSERResp, error)
	DelMIKEUSER(ctx context.Context, in *DelMIKEUSERReq, opts ...grpc.CallOption) (*DelMIKEUSERResp, error)
	GetMIKEUSERById(ctx context.Context, in *GetMIKEUSERByIdReq, opts ...grpc.CallOption) (*GetMIKEUSERByIdResp, error)
	SearchMIKEUSER(ctx context.Context, in *SearchMIKEUSERReq, opts ...grpc.CallOption) (*SearchMIKEUSERResp, error)
	//-----------------------mikeUserData-----------------------
	AddMikeUserData(ctx context.Context, in *AddMikeUserDataReq, opts ...grpc.CallOption) (*AddMikeUserDataResp, error)
	UpdateMikeUserData(ctx context.Context, in *UpdateMikeUserDataReq, opts ...grpc.CallOption) (*UpdateMikeUserDataResp, error)
	DelMikeUserData(ctx context.Context, in *DelMikeUserDataReq, opts ...grpc.CallOption) (*DelMikeUserDataResp, error)
	GetMikeUserDataById(ctx context.Context, in *GetMikeUserDataByIdReq, opts ...grpc.CallOption) (*GetMikeUserDataByIdResp, error)
	SearchMikeUserData(ctx context.Context, in *SearchMikeUserDataReq, opts ...grpc.CallOption) (*SearchMikeUserDataResp, error)
}

type ordercenterClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdercenterClient(cc grpc.ClientConnInterface) OrdercenterClient {
	return &ordercenterClient{cc}
}

func (c *ordercenterClient) AddMIKEORDER(ctx context.Context, in *AddMIKEORDERReq, opts ...grpc.CallOption) (*AddMIKEORDERResp, error) {
	out := new(AddMIKEORDERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/AddMIKEORDER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) UpdateMIKEORDER(ctx context.Context, in *UpdateMIKEORDERReq, opts ...grpc.CallOption) (*UpdateMIKEORDERResp, error) {
	out := new(UpdateMIKEORDERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/UpdateMIKEORDER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) DelMIKEORDER(ctx context.Context, in *DelMIKEORDERReq, opts ...grpc.CallOption) (*DelMIKEORDERResp, error) {
	out := new(DelMIKEORDERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/DelMIKEORDER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) GetMIKEORDERById(ctx context.Context, in *GetMIKEORDERByIdReq, opts ...grpc.CallOption) (*GetMIKEORDERByIdResp, error) {
	out := new(GetMIKEORDERByIdResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/GetMIKEORDERById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) SearchMIKEORDER(ctx context.Context, in *SearchMIKEORDERReq, opts ...grpc.CallOption) (*SearchMIKEORDERResp, error) {
	out := new(SearchMIKEORDERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/SearchMIKEORDER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) AddMIKESTORE(ctx context.Context, in *AddMIKESTOREReq, opts ...grpc.CallOption) (*AddMIKESTOREResp, error) {
	out := new(AddMIKESTOREResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/AddMIKESTORE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) UpdateMIKESTORE(ctx context.Context, in *UpdateMIKESTOREReq, opts ...grpc.CallOption) (*UpdateMIKESTOREResp, error) {
	out := new(UpdateMIKESTOREResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/UpdateMIKESTORE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) DelMIKESTORE(ctx context.Context, in *DelMIKESTOREReq, opts ...grpc.CallOption) (*DelMIKESTOREResp, error) {
	out := new(DelMIKESTOREResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/DelMIKESTORE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) GetMIKESTOREById(ctx context.Context, in *GetMIKESTOREByIdReq, opts ...grpc.CallOption) (*GetMIKESTOREByIdResp, error) {
	out := new(GetMIKESTOREByIdResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/GetMIKESTOREById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) SearchMIKESTORE(ctx context.Context, in *SearchMIKESTOREReq, opts ...grpc.CallOption) (*SearchMIKESTOREResp, error) {
	out := new(SearchMIKESTOREResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/SearchMIKESTORE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) AddMIKEUSER(ctx context.Context, in *AddMIKEUSERReq, opts ...grpc.CallOption) (*AddMIKEUSERResp, error) {
	out := new(AddMIKEUSERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/AddMIKEUSER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) UpdateMIKEUSER(ctx context.Context, in *UpdateMIKEUSERReq, opts ...grpc.CallOption) (*UpdateMIKEUSERResp, error) {
	out := new(UpdateMIKEUSERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/UpdateMIKEUSER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) DelMIKEUSER(ctx context.Context, in *DelMIKEUSERReq, opts ...grpc.CallOption) (*DelMIKEUSERResp, error) {
	out := new(DelMIKEUSERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/DelMIKEUSER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) GetMIKEUSERById(ctx context.Context, in *GetMIKEUSERByIdReq, opts ...grpc.CallOption) (*GetMIKEUSERByIdResp, error) {
	out := new(GetMIKEUSERByIdResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/GetMIKEUSERById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) SearchMIKEUSER(ctx context.Context, in *SearchMIKEUSERReq, opts ...grpc.CallOption) (*SearchMIKEUSERResp, error) {
	out := new(SearchMIKEUSERResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/SearchMIKEUSER", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) AddMikeUserData(ctx context.Context, in *AddMikeUserDataReq, opts ...grpc.CallOption) (*AddMikeUserDataResp, error) {
	out := new(AddMikeUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/AddMikeUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) UpdateMikeUserData(ctx context.Context, in *UpdateMikeUserDataReq, opts ...grpc.CallOption) (*UpdateMikeUserDataResp, error) {
	out := new(UpdateMikeUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/UpdateMikeUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) DelMikeUserData(ctx context.Context, in *DelMikeUserDataReq, opts ...grpc.CallOption) (*DelMikeUserDataResp, error) {
	out := new(DelMikeUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/DelMikeUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) GetMikeUserDataById(ctx context.Context, in *GetMikeUserDataByIdReq, opts ...grpc.CallOption) (*GetMikeUserDataByIdResp, error) {
	out := new(GetMikeUserDataByIdResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/GetMikeUserDataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordercenterClient) SearchMikeUserData(ctx context.Context, in *SearchMikeUserDataReq, opts ...grpc.CallOption) (*SearchMikeUserDataResp, error) {
	out := new(SearchMikeUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.ordercenter/SearchMikeUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdercenterServer is the server API for Ordercenter service.
// All implementations must embed UnimplementedOrdercenterServer
// for forward compatibility
type OrdercenterServer interface {
	//-----------------------MIKEORDER-----------------------
	AddMIKEORDER(context.Context, *AddMIKEORDERReq) (*AddMIKEORDERResp, error)
	UpdateMIKEORDER(context.Context, *UpdateMIKEORDERReq) (*UpdateMIKEORDERResp, error)
	DelMIKEORDER(context.Context, *DelMIKEORDERReq) (*DelMIKEORDERResp, error)
	GetMIKEORDERById(context.Context, *GetMIKEORDERByIdReq) (*GetMIKEORDERByIdResp, error)
	SearchMIKEORDER(context.Context, *SearchMIKEORDERReq) (*SearchMIKEORDERResp, error)
	//-----------------------MIKESTORE-----------------------
	AddMIKESTORE(context.Context, *AddMIKESTOREReq) (*AddMIKESTOREResp, error)
	UpdateMIKESTORE(context.Context, *UpdateMIKESTOREReq) (*UpdateMIKESTOREResp, error)
	DelMIKESTORE(context.Context, *DelMIKESTOREReq) (*DelMIKESTOREResp, error)
	GetMIKESTOREById(context.Context, *GetMIKESTOREByIdReq) (*GetMIKESTOREByIdResp, error)
	SearchMIKESTORE(context.Context, *SearchMIKESTOREReq) (*SearchMIKESTOREResp, error)
	//-----------------------MIKEUSER-----------------------
	AddMIKEUSER(context.Context, *AddMIKEUSERReq) (*AddMIKEUSERResp, error)
	UpdateMIKEUSER(context.Context, *UpdateMIKEUSERReq) (*UpdateMIKEUSERResp, error)
	DelMIKEUSER(context.Context, *DelMIKEUSERReq) (*DelMIKEUSERResp, error)
	GetMIKEUSERById(context.Context, *GetMIKEUSERByIdReq) (*GetMIKEUSERByIdResp, error)
	SearchMIKEUSER(context.Context, *SearchMIKEUSERReq) (*SearchMIKEUSERResp, error)
	//-----------------------mikeUserData-----------------------
	AddMikeUserData(context.Context, *AddMikeUserDataReq) (*AddMikeUserDataResp, error)
	UpdateMikeUserData(context.Context, *UpdateMikeUserDataReq) (*UpdateMikeUserDataResp, error)
	DelMikeUserData(context.Context, *DelMikeUserDataReq) (*DelMikeUserDataResp, error)
	GetMikeUserDataById(context.Context, *GetMikeUserDataByIdReq) (*GetMikeUserDataByIdResp, error)
	SearchMikeUserData(context.Context, *SearchMikeUserDataReq) (*SearchMikeUserDataResp, error)
	mustEmbedUnimplementedOrdercenterServer()
}

// UnimplementedOrdercenterServer must be embedded to have forward compatible implementations.
type UnimplementedOrdercenterServer struct {
}

func (UnimplementedOrdercenterServer) AddMIKEORDER(context.Context, *AddMIKEORDERReq) (*AddMIKEORDERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMIKEORDER not implemented")
}
func (UnimplementedOrdercenterServer) UpdateMIKEORDER(context.Context, *UpdateMIKEORDERReq) (*UpdateMIKEORDERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMIKEORDER not implemented")
}
func (UnimplementedOrdercenterServer) DelMIKEORDER(context.Context, *DelMIKEORDERReq) (*DelMIKEORDERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMIKEORDER not implemented")
}
func (UnimplementedOrdercenterServer) GetMIKEORDERById(context.Context, *GetMIKEORDERByIdReq) (*GetMIKEORDERByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMIKEORDERById not implemented")
}
func (UnimplementedOrdercenterServer) SearchMIKEORDER(context.Context, *SearchMIKEORDERReq) (*SearchMIKEORDERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMIKEORDER not implemented")
}
func (UnimplementedOrdercenterServer) AddMIKESTORE(context.Context, *AddMIKESTOREReq) (*AddMIKESTOREResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMIKESTORE not implemented")
}
func (UnimplementedOrdercenterServer) UpdateMIKESTORE(context.Context, *UpdateMIKESTOREReq) (*UpdateMIKESTOREResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMIKESTORE not implemented")
}
func (UnimplementedOrdercenterServer) DelMIKESTORE(context.Context, *DelMIKESTOREReq) (*DelMIKESTOREResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMIKESTORE not implemented")
}
func (UnimplementedOrdercenterServer) GetMIKESTOREById(context.Context, *GetMIKESTOREByIdReq) (*GetMIKESTOREByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMIKESTOREById not implemented")
}
func (UnimplementedOrdercenterServer) SearchMIKESTORE(context.Context, *SearchMIKESTOREReq) (*SearchMIKESTOREResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMIKESTORE not implemented")
}
func (UnimplementedOrdercenterServer) AddMIKEUSER(context.Context, *AddMIKEUSERReq) (*AddMIKEUSERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMIKEUSER not implemented")
}
func (UnimplementedOrdercenterServer) UpdateMIKEUSER(context.Context, *UpdateMIKEUSERReq) (*UpdateMIKEUSERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMIKEUSER not implemented")
}
func (UnimplementedOrdercenterServer) DelMIKEUSER(context.Context, *DelMIKEUSERReq) (*DelMIKEUSERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMIKEUSER not implemented")
}
func (UnimplementedOrdercenterServer) GetMIKEUSERById(context.Context, *GetMIKEUSERByIdReq) (*GetMIKEUSERByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMIKEUSERById not implemented")
}
func (UnimplementedOrdercenterServer) SearchMIKEUSER(context.Context, *SearchMIKEUSERReq) (*SearchMIKEUSERResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMIKEUSER not implemented")
}
func (UnimplementedOrdercenterServer) AddMikeUserData(context.Context, *AddMikeUserDataReq) (*AddMikeUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMikeUserData not implemented")
}
func (UnimplementedOrdercenterServer) UpdateMikeUserData(context.Context, *UpdateMikeUserDataReq) (*UpdateMikeUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMikeUserData not implemented")
}
func (UnimplementedOrdercenterServer) DelMikeUserData(context.Context, *DelMikeUserDataReq) (*DelMikeUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMikeUserData not implemented")
}
func (UnimplementedOrdercenterServer) GetMikeUserDataById(context.Context, *GetMikeUserDataByIdReq) (*GetMikeUserDataByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMikeUserDataById not implemented")
}
func (UnimplementedOrdercenterServer) SearchMikeUserData(context.Context, *SearchMikeUserDataReq) (*SearchMikeUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMikeUserData not implemented")
}
func (UnimplementedOrdercenterServer) mustEmbedUnimplementedOrdercenterServer() {}

// UnsafeOrdercenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdercenterServer will
// result in compilation errors.
type UnsafeOrdercenterServer interface {
	mustEmbedUnimplementedOrdercenterServer()
}

func RegisterOrdercenterServer(s grpc.ServiceRegistrar, srv OrdercenterServer) {
	s.RegisterService(&Ordercenter_ServiceDesc, srv)
}

func _Ordercenter_AddMIKEORDER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMIKEORDERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).AddMIKEORDER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/AddMIKEORDER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).AddMIKEORDER(ctx, req.(*AddMIKEORDERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_UpdateMIKEORDER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMIKEORDERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).UpdateMIKEORDER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/UpdateMIKEORDER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).UpdateMIKEORDER(ctx, req.(*UpdateMIKEORDERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_DelMIKEORDER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMIKEORDERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).DelMIKEORDER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/DelMIKEORDER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).DelMIKEORDER(ctx, req.(*DelMIKEORDERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_GetMIKEORDERById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMIKEORDERByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).GetMIKEORDERById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/GetMIKEORDERById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).GetMIKEORDERById(ctx, req.(*GetMIKEORDERByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_SearchMIKEORDER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMIKEORDERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).SearchMIKEORDER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/SearchMIKEORDER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).SearchMIKEORDER(ctx, req.(*SearchMIKEORDERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_AddMIKESTORE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMIKESTOREReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).AddMIKESTORE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/AddMIKESTORE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).AddMIKESTORE(ctx, req.(*AddMIKESTOREReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_UpdateMIKESTORE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMIKESTOREReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).UpdateMIKESTORE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/UpdateMIKESTORE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).UpdateMIKESTORE(ctx, req.(*UpdateMIKESTOREReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_DelMIKESTORE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMIKESTOREReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).DelMIKESTORE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/DelMIKESTORE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).DelMIKESTORE(ctx, req.(*DelMIKESTOREReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_GetMIKESTOREById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMIKESTOREByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).GetMIKESTOREById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/GetMIKESTOREById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).GetMIKESTOREById(ctx, req.(*GetMIKESTOREByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_SearchMIKESTORE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMIKESTOREReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).SearchMIKESTORE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/SearchMIKESTORE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).SearchMIKESTORE(ctx, req.(*SearchMIKESTOREReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_AddMIKEUSER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMIKEUSERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).AddMIKEUSER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/AddMIKEUSER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).AddMIKEUSER(ctx, req.(*AddMIKEUSERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_UpdateMIKEUSER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMIKEUSERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).UpdateMIKEUSER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/UpdateMIKEUSER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).UpdateMIKEUSER(ctx, req.(*UpdateMIKEUSERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_DelMIKEUSER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMIKEUSERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).DelMIKEUSER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/DelMIKEUSER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).DelMIKEUSER(ctx, req.(*DelMIKEUSERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_GetMIKEUSERById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMIKEUSERByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).GetMIKEUSERById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/GetMIKEUSERById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).GetMIKEUSERById(ctx, req.(*GetMIKEUSERByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_SearchMIKEUSER_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMIKEUSERReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).SearchMIKEUSER(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/SearchMIKEUSER",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).SearchMIKEUSER(ctx, req.(*SearchMIKEUSERReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_AddMikeUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMikeUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).AddMikeUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/AddMikeUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).AddMikeUserData(ctx, req.(*AddMikeUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_UpdateMikeUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMikeUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).UpdateMikeUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/UpdateMikeUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).UpdateMikeUserData(ctx, req.(*UpdateMikeUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_DelMikeUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMikeUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).DelMikeUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/DelMikeUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).DelMikeUserData(ctx, req.(*DelMikeUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_GetMikeUserDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMikeUserDataByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).GetMikeUserDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/GetMikeUserDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).GetMikeUserDataById(ctx, req.(*GetMikeUserDataByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordercenter_SearchMikeUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMikeUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdercenterServer).SearchMikeUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ordercenter/SearchMikeUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdercenterServer).SearchMikeUserData(ctx, req.(*SearchMikeUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ordercenter_ServiceDesc is the grpc.ServiceDesc for Ordercenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ordercenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ordercenter",
	HandlerType: (*OrdercenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMIKEORDER",
			Handler:    _Ordercenter_AddMIKEORDER_Handler,
		},
		{
			MethodName: "UpdateMIKEORDER",
			Handler:    _Ordercenter_UpdateMIKEORDER_Handler,
		},
		{
			MethodName: "DelMIKEORDER",
			Handler:    _Ordercenter_DelMIKEORDER_Handler,
		},
		{
			MethodName: "GetMIKEORDERById",
			Handler:    _Ordercenter_GetMIKEORDERById_Handler,
		},
		{
			MethodName: "SearchMIKEORDER",
			Handler:    _Ordercenter_SearchMIKEORDER_Handler,
		},
		{
			MethodName: "AddMIKESTORE",
			Handler:    _Ordercenter_AddMIKESTORE_Handler,
		},
		{
			MethodName: "UpdateMIKESTORE",
			Handler:    _Ordercenter_UpdateMIKESTORE_Handler,
		},
		{
			MethodName: "DelMIKESTORE",
			Handler:    _Ordercenter_DelMIKESTORE_Handler,
		},
		{
			MethodName: "GetMIKESTOREById",
			Handler:    _Ordercenter_GetMIKESTOREById_Handler,
		},
		{
			MethodName: "SearchMIKESTORE",
			Handler:    _Ordercenter_SearchMIKESTORE_Handler,
		},
		{
			MethodName: "AddMIKEUSER",
			Handler:    _Ordercenter_AddMIKEUSER_Handler,
		},
		{
			MethodName: "UpdateMIKEUSER",
			Handler:    _Ordercenter_UpdateMIKEUSER_Handler,
		},
		{
			MethodName: "DelMIKEUSER",
			Handler:    _Ordercenter_DelMIKEUSER_Handler,
		},
		{
			MethodName: "GetMIKEUSERById",
			Handler:    _Ordercenter_GetMIKEUSERById_Handler,
		},
		{
			MethodName: "SearchMIKEUSER",
			Handler:    _Ordercenter_SearchMIKEUSER_Handler,
		},
		{
			MethodName: "AddMikeUserData",
			Handler:    _Ordercenter_AddMikeUserData_Handler,
		},
		{
			MethodName: "UpdateMikeUserData",
			Handler:    _Ordercenter_UpdateMikeUserData_Handler,
		},
		{
			MethodName: "DelMikeUserData",
			Handler:    _Ordercenter_DelMikeUserData_Handler,
		},
		{
			MethodName: "GetMikeUserDataById",
			Handler:    _Ordercenter_GetMikeUserDataById_Handler,
		},
		{
			MethodName: "SearchMikeUserData",
			Handler:    _Ordercenter_SearchMikeUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ordercenter.proto",
}
