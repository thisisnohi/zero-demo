// Code generated by goctl. DO NOT EDIT!
// Source: ordercenter.proto

package ordercenter

import (
	"context"

	"zero-demo/ordercenter/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddMIKEORDERReq         = pb.AddMIKEORDERReq
	AddMIKEORDERResp        = pb.AddMIKEORDERResp
	AddMIKESTOREReq         = pb.AddMIKESTOREReq
	AddMIKESTOREResp        = pb.AddMIKESTOREResp
	AddMIKEUSERReq          = pb.AddMIKEUSERReq
	AddMIKEUSERResp         = pb.AddMIKEUSERResp
	AddMikeUserDataReq      = pb.AddMikeUserDataReq
	AddMikeUserDataResp     = pb.AddMikeUserDataResp
	DelMIKEORDERReq         = pb.DelMIKEORDERReq
	DelMIKEORDERResp        = pb.DelMIKEORDERResp
	DelMIKESTOREReq         = pb.DelMIKESTOREReq
	DelMIKESTOREResp        = pb.DelMIKESTOREResp
	DelMIKEUSERReq          = pb.DelMIKEUSERReq
	DelMIKEUSERResp         = pb.DelMIKEUSERResp
	DelMikeUserDataReq      = pb.DelMikeUserDataReq
	DelMikeUserDataResp     = pb.DelMikeUserDataResp
	GetMIKEORDERByIdReq     = pb.GetMIKEORDERByIdReq
	GetMIKEORDERByIdResp    = pb.GetMIKEORDERByIdResp
	GetMIKESTOREByIdReq     = pb.GetMIKESTOREByIdReq
	GetMIKESTOREByIdResp    = pb.GetMIKESTOREByIdResp
	GetMIKEUSERByIdReq      = pb.GetMIKEUSERByIdReq
	GetMIKEUSERByIdResp     = pb.GetMIKEUSERByIdResp
	GetMikeUserDataByIdReq  = pb.GetMikeUserDataByIdReq
	GetMikeUserDataByIdResp = pb.GetMikeUserDataByIdResp
	MIKEORDER               = pb.MIKEORDER
	MIKESTORE               = pb.MIKESTORE
	MIKEUSER                = pb.MIKEUSER
	MikeUserData            = pb.MikeUserData
	SearchMIKEORDERReq      = pb.SearchMIKEORDERReq
	SearchMIKEORDERResp     = pb.SearchMIKEORDERResp
	SearchMIKESTOREReq      = pb.SearchMIKESTOREReq
	SearchMIKESTOREResp     = pb.SearchMIKESTOREResp
	SearchMIKEUSERReq       = pb.SearchMIKEUSERReq
	SearchMIKEUSERResp      = pb.SearchMIKEUSERResp
	SearchMikeUserDataReq   = pb.SearchMikeUserDataReq
	SearchMikeUserDataResp  = pb.SearchMikeUserDataResp
	UpdateMIKEORDERReq      = pb.UpdateMIKEORDERReq
	UpdateMIKEORDERResp     = pb.UpdateMIKEORDERResp
	UpdateMIKESTOREReq      = pb.UpdateMIKESTOREReq
	UpdateMIKESTOREResp     = pb.UpdateMIKESTOREResp
	UpdateMIKEUSERReq       = pb.UpdateMIKEUSERReq
	UpdateMIKEUSERResp      = pb.UpdateMIKEUSERResp
	UpdateMikeUserDataReq   = pb.UpdateMikeUserDataReq
	UpdateMikeUserDataResp  = pb.UpdateMikeUserDataResp

	Ordercenter interface {
		// -----------------------MIKEORDER-----------------------
		AddMIKEORDER(ctx context.Context, in *AddMIKEORDERReq, opts ...grpc.CallOption) (*AddMIKEORDERResp, error)
		UpdateMIKEORDER(ctx context.Context, in *UpdateMIKEORDERReq, opts ...grpc.CallOption) (*UpdateMIKEORDERResp, error)
		DelMIKEORDER(ctx context.Context, in *DelMIKEORDERReq, opts ...grpc.CallOption) (*DelMIKEORDERResp, error)
		GetMIKEORDERById(ctx context.Context, in *GetMIKEORDERByIdReq, opts ...grpc.CallOption) (*GetMIKEORDERByIdResp, error)
		SearchMIKEORDER(ctx context.Context, in *SearchMIKEORDERReq, opts ...grpc.CallOption) (*SearchMIKEORDERResp, error)
		// -----------------------MIKESTORE-----------------------
		AddMIKESTORE(ctx context.Context, in *AddMIKESTOREReq, opts ...grpc.CallOption) (*AddMIKESTOREResp, error)
		UpdateMIKESTORE(ctx context.Context, in *UpdateMIKESTOREReq, opts ...grpc.CallOption) (*UpdateMIKESTOREResp, error)
		DelMIKESTORE(ctx context.Context, in *DelMIKESTOREReq, opts ...grpc.CallOption) (*DelMIKESTOREResp, error)
		GetMIKESTOREById(ctx context.Context, in *GetMIKESTOREByIdReq, opts ...grpc.CallOption) (*GetMIKESTOREByIdResp, error)
		SearchMIKESTORE(ctx context.Context, in *SearchMIKESTOREReq, opts ...grpc.CallOption) (*SearchMIKESTOREResp, error)
		// -----------------------MIKEUSER-----------------------
		AddMIKEUSER(ctx context.Context, in *AddMIKEUSERReq, opts ...grpc.CallOption) (*AddMIKEUSERResp, error)
		UpdateMIKEUSER(ctx context.Context, in *UpdateMIKEUSERReq, opts ...grpc.CallOption) (*UpdateMIKEUSERResp, error)
		DelMIKEUSER(ctx context.Context, in *DelMIKEUSERReq, opts ...grpc.CallOption) (*DelMIKEUSERResp, error)
		GetMIKEUSERById(ctx context.Context, in *GetMIKEUSERByIdReq, opts ...grpc.CallOption) (*GetMIKEUSERByIdResp, error)
		SearchMIKEUSER(ctx context.Context, in *SearchMIKEUSERReq, opts ...grpc.CallOption) (*SearchMIKEUSERResp, error)
		// -----------------------mikeUserData-----------------------
		AddMikeUserData(ctx context.Context, in *AddMikeUserDataReq, opts ...grpc.CallOption) (*AddMikeUserDataResp, error)
		UpdateMikeUserData(ctx context.Context, in *UpdateMikeUserDataReq, opts ...grpc.CallOption) (*UpdateMikeUserDataResp, error)
		DelMikeUserData(ctx context.Context, in *DelMikeUserDataReq, opts ...grpc.CallOption) (*DelMikeUserDataResp, error)
		GetMikeUserDataById(ctx context.Context, in *GetMikeUserDataByIdReq, opts ...grpc.CallOption) (*GetMikeUserDataByIdResp, error)
		SearchMikeUserData(ctx context.Context, in *SearchMikeUserDataReq, opts ...grpc.CallOption) (*SearchMikeUserDataResp, error)
	}

	defaultOrdercenter struct {
		cli zrpc.Client
	}
)

func NewOrdercenter(cli zrpc.Client) Ordercenter {
	return &defaultOrdercenter{
		cli: cli,
	}
}

// -----------------------MIKEORDER-----------------------
func (m *defaultOrdercenter) AddMIKEORDER(ctx context.Context, in *AddMIKEORDERReq, opts ...grpc.CallOption) (*AddMIKEORDERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.AddMIKEORDER(ctx, in, opts...)
}

func (m *defaultOrdercenter) UpdateMIKEORDER(ctx context.Context, in *UpdateMIKEORDERReq, opts ...grpc.CallOption) (*UpdateMIKEORDERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.UpdateMIKEORDER(ctx, in, opts...)
}

func (m *defaultOrdercenter) DelMIKEORDER(ctx context.Context, in *DelMIKEORDERReq, opts ...grpc.CallOption) (*DelMIKEORDERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.DelMIKEORDER(ctx, in, opts...)
}

func (m *defaultOrdercenter) GetMIKEORDERById(ctx context.Context, in *GetMIKEORDERByIdReq, opts ...grpc.CallOption) (*GetMIKEORDERByIdResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.GetMIKEORDERById(ctx, in, opts...)
}

func (m *defaultOrdercenter) SearchMIKEORDER(ctx context.Context, in *SearchMIKEORDERReq, opts ...grpc.CallOption) (*SearchMIKEORDERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.SearchMIKEORDER(ctx, in, opts...)
}

// -----------------------MIKESTORE-----------------------
func (m *defaultOrdercenter) AddMIKESTORE(ctx context.Context, in *AddMIKESTOREReq, opts ...grpc.CallOption) (*AddMIKESTOREResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.AddMIKESTORE(ctx, in, opts...)
}

func (m *defaultOrdercenter) UpdateMIKESTORE(ctx context.Context, in *UpdateMIKESTOREReq, opts ...grpc.CallOption) (*UpdateMIKESTOREResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.UpdateMIKESTORE(ctx, in, opts...)
}

func (m *defaultOrdercenter) DelMIKESTORE(ctx context.Context, in *DelMIKESTOREReq, opts ...grpc.CallOption) (*DelMIKESTOREResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.DelMIKESTORE(ctx, in, opts...)
}

func (m *defaultOrdercenter) GetMIKESTOREById(ctx context.Context, in *GetMIKESTOREByIdReq, opts ...grpc.CallOption) (*GetMIKESTOREByIdResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.GetMIKESTOREById(ctx, in, opts...)
}

func (m *defaultOrdercenter) SearchMIKESTORE(ctx context.Context, in *SearchMIKESTOREReq, opts ...grpc.CallOption) (*SearchMIKESTOREResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.SearchMIKESTORE(ctx, in, opts...)
}

// -----------------------MIKEUSER-----------------------
func (m *defaultOrdercenter) AddMIKEUSER(ctx context.Context, in *AddMIKEUSERReq, opts ...grpc.CallOption) (*AddMIKEUSERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.AddMIKEUSER(ctx, in, opts...)
}

func (m *defaultOrdercenter) UpdateMIKEUSER(ctx context.Context, in *UpdateMIKEUSERReq, opts ...grpc.CallOption) (*UpdateMIKEUSERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.UpdateMIKEUSER(ctx, in, opts...)
}

func (m *defaultOrdercenter) DelMIKEUSER(ctx context.Context, in *DelMIKEUSERReq, opts ...grpc.CallOption) (*DelMIKEUSERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.DelMIKEUSER(ctx, in, opts...)
}

func (m *defaultOrdercenter) GetMIKEUSERById(ctx context.Context, in *GetMIKEUSERByIdReq, opts ...grpc.CallOption) (*GetMIKEUSERByIdResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.GetMIKEUSERById(ctx, in, opts...)
}

func (m *defaultOrdercenter) SearchMIKEUSER(ctx context.Context, in *SearchMIKEUSERReq, opts ...grpc.CallOption) (*SearchMIKEUSERResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.SearchMIKEUSER(ctx, in, opts...)
}

// -----------------------mikeUserData-----------------------
func (m *defaultOrdercenter) AddMikeUserData(ctx context.Context, in *AddMikeUserDataReq, opts ...grpc.CallOption) (*AddMikeUserDataResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.AddMikeUserData(ctx, in, opts...)
}

func (m *defaultOrdercenter) UpdateMikeUserData(ctx context.Context, in *UpdateMikeUserDataReq, opts ...grpc.CallOption) (*UpdateMikeUserDataResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.UpdateMikeUserData(ctx, in, opts...)
}

func (m *defaultOrdercenter) DelMikeUserData(ctx context.Context, in *DelMikeUserDataReq, opts ...grpc.CallOption) (*DelMikeUserDataResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.DelMikeUserData(ctx, in, opts...)
}

func (m *defaultOrdercenter) GetMikeUserDataById(ctx context.Context, in *GetMikeUserDataByIdReq, opts ...grpc.CallOption) (*GetMikeUserDataByIdResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.GetMikeUserDataById(ctx, in, opts...)
}

func (m *defaultOrdercenter) SearchMikeUserData(ctx context.Context, in *SearchMikeUserDataReq, opts ...grpc.CallOption) (*SearchMikeUserDataResp, error) {
	client := pb.NewOrdercenterClient(m.cli.Conn())
	return client.SearchMikeUserData(ctx, in, opts...)
}
