// Code generated by goctl. DO NOT EDIT!
// Source: ordercenter.proto

package server

import (
	"context"

	"zero-demo/ordercenter/internal/logic"
	"zero-demo/ordercenter/internal/svc"
	"zero-demo/ordercenter/pb"
)

type OrdercenterServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedOrdercenterServer
}

func NewOrdercenterServer(svcCtx *svc.ServiceContext) *OrdercenterServer {
	return &OrdercenterServer{
		svcCtx: svcCtx,
	}
}

// -----------------------MIKEORDER-----------------------
func (s *OrdercenterServer) AddMIKEORDER(ctx context.Context, in *pb.AddMIKEORDERReq) (*pb.AddMIKEORDERResp, error) {
	l := logic.NewAddMIKEORDERLogic(ctx, s.svcCtx)
	return l.AddMIKEORDER(in)
}

func (s *OrdercenterServer) UpdateMIKEORDER(ctx context.Context, in *pb.UpdateMIKEORDERReq) (*pb.UpdateMIKEORDERResp, error) {
	l := logic.NewUpdateMIKEORDERLogic(ctx, s.svcCtx)
	return l.UpdateMIKEORDER(in)
}

func (s *OrdercenterServer) DelMIKEORDER(ctx context.Context, in *pb.DelMIKEORDERReq) (*pb.DelMIKEORDERResp, error) {
	l := logic.NewDelMIKEORDERLogic(ctx, s.svcCtx)
	return l.DelMIKEORDER(in)
}

func (s *OrdercenterServer) GetMIKEORDERById(ctx context.Context, in *pb.GetMIKEORDERByIdReq) (*pb.GetMIKEORDERByIdResp, error) {
	l := logic.NewGetMIKEORDERByIdLogic(ctx, s.svcCtx)
	return l.GetMIKEORDERById(in)
}

func (s *OrdercenterServer) SearchMIKEORDER(ctx context.Context, in *pb.SearchMIKEORDERReq) (*pb.SearchMIKEORDERResp, error) {
	l := logic.NewSearchMIKEORDERLogic(ctx, s.svcCtx)
	return l.SearchMIKEORDER(in)
}

// -----------------------MIKESTORE-----------------------
func (s *OrdercenterServer) AddMIKESTORE(ctx context.Context, in *pb.AddMIKESTOREReq) (*pb.AddMIKESTOREResp, error) {
	l := logic.NewAddMIKESTORELogic(ctx, s.svcCtx)
	return l.AddMIKESTORE(in)
}

func (s *OrdercenterServer) UpdateMIKESTORE(ctx context.Context, in *pb.UpdateMIKESTOREReq) (*pb.UpdateMIKESTOREResp, error) {
	l := logic.NewUpdateMIKESTORELogic(ctx, s.svcCtx)
	return l.UpdateMIKESTORE(in)
}

func (s *OrdercenterServer) DelMIKESTORE(ctx context.Context, in *pb.DelMIKESTOREReq) (*pb.DelMIKESTOREResp, error) {
	l := logic.NewDelMIKESTORELogic(ctx, s.svcCtx)
	return l.DelMIKESTORE(in)
}

func (s *OrdercenterServer) GetMIKESTOREById(ctx context.Context, in *pb.GetMIKESTOREByIdReq) (*pb.GetMIKESTOREByIdResp, error) {
	l := logic.NewGetMIKESTOREByIdLogic(ctx, s.svcCtx)
	return l.GetMIKESTOREById(in)
}

func (s *OrdercenterServer) SearchMIKESTORE(ctx context.Context, in *pb.SearchMIKESTOREReq) (*pb.SearchMIKESTOREResp, error) {
	l := logic.NewSearchMIKESTORELogic(ctx, s.svcCtx)
	return l.SearchMIKESTORE(in)
}

// -----------------------MIKEUSER-----------------------
func (s *OrdercenterServer) AddMIKEUSER(ctx context.Context, in *pb.AddMIKEUSERReq) (*pb.AddMIKEUSERResp, error) {
	l := logic.NewAddMIKEUSERLogic(ctx, s.svcCtx)
	return l.AddMIKEUSER(in)
}

func (s *OrdercenterServer) UpdateMIKEUSER(ctx context.Context, in *pb.UpdateMIKEUSERReq) (*pb.UpdateMIKEUSERResp, error) {
	l := logic.NewUpdateMIKEUSERLogic(ctx, s.svcCtx)
	return l.UpdateMIKEUSER(in)
}

func (s *OrdercenterServer) DelMIKEUSER(ctx context.Context, in *pb.DelMIKEUSERReq) (*pb.DelMIKEUSERResp, error) {
	l := logic.NewDelMIKEUSERLogic(ctx, s.svcCtx)
	return l.DelMIKEUSER(in)
}

func (s *OrdercenterServer) GetMIKEUSERById(ctx context.Context, in *pb.GetMIKEUSERByIdReq) (*pb.GetMIKEUSERByIdResp, error) {
	l := logic.NewGetMIKEUSERByIdLogic(ctx, s.svcCtx)
	return l.GetMIKEUSERById(in)
}

func (s *OrdercenterServer) SearchMIKEUSER(ctx context.Context, in *pb.SearchMIKEUSERReq) (*pb.SearchMIKEUSERResp, error) {
	l := logic.NewSearchMIKEUSERLogic(ctx, s.svcCtx)
	return l.SearchMIKEUSER(in)
}

// -----------------------mikeUserData-----------------------
func (s *OrdercenterServer) AddMikeUserData(ctx context.Context, in *pb.AddMikeUserDataReq) (*pb.AddMikeUserDataResp, error) {
	l := logic.NewAddMikeUserDataLogic(ctx, s.svcCtx)
	return l.AddMikeUserData(in)
}

func (s *OrdercenterServer) UpdateMikeUserData(ctx context.Context, in *pb.UpdateMikeUserDataReq) (*pb.UpdateMikeUserDataResp, error) {
	l := logic.NewUpdateMikeUserDataLogic(ctx, s.svcCtx)
	return l.UpdateMikeUserData(in)
}

func (s *OrdercenterServer) DelMikeUserData(ctx context.Context, in *pb.DelMikeUserDataReq) (*pb.DelMikeUserDataResp, error) {
	l := logic.NewDelMikeUserDataLogic(ctx, s.svcCtx)
	return l.DelMikeUserData(in)
}

func (s *OrdercenterServer) GetMikeUserDataById(ctx context.Context, in *pb.GetMikeUserDataByIdReq) (*pb.GetMikeUserDataByIdResp, error) {
	l := logic.NewGetMikeUserDataByIdLogic(ctx, s.svcCtx)
	return l.GetMikeUserDataById(in)
}

func (s *OrdercenterServer) SearchMikeUserData(ctx context.Context, in *pb.SearchMikeUserDataReq) (*pb.SearchMikeUserDataResp, error) {
	l := logic.NewSearchMikeUserDataLogic(ctx, s.svcCtx)
	return l.SearchMikeUserData(in)
}
